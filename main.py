#!/usr/bin/env python3
import asyncio
from datetime import date, datetime
import pandas as pd
import pytz
import requests
from bs4 import BeautifulSoup
from telegram import Bot

# Telegram configuration (hardcoded as requested)
BOT_TOKEN = '8442392037:AAEiM_b4QfdFLqbmmc1PXNvA99yxmFVLEp8'
CHAT_ID = '350766421'

def fetch_us_events():
    """–°–∫—Ä–µ–π–ø–∏–º —Å–æ–±—ã—Ç–∏—è –°–®–ê —Å TradingEconomics"""
    try:
        today_str = date.today().strftime("%Y-%m-%d")
        url = f"https://tradingeconomics.com/united-states/calendar?date={today_str}"
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'html.parser')
        events = []
        
        # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ TradingEconomics: rows —Å –∫–ª–∞—Å—Å–æ–º 'calendar__row')
        rows = soup.find_all('tr', class_='calendar__row')
        for row in rows:
            country = row.find('span', class_='calendar__country')
            if country and ('United States' in country.text or 'USD' in country.text):
                time_el = row.find('time', class_='calendar__time')
                event_el = row.find('span', class_='calendar__event')
                forecast_el = row.find('span', class_='calendar__forecast')
                previous_el = row.find('span', class_='calendar__previous')
                impact_el = row.find('span', class_='calendar__impact')
                
                time = time_el.text.strip() if time_el else 'TBD'
                event = event_el.text.strip() if event_el else 'Unknown'
                forecast = forecast_el.text.strip() if forecast_el else ''
                previous = previous_el.text.strip() if previous_el else ''
                impact = impact_el.get('data-impact', 'medium') if impact_el else 'medium'  # high/medium/low
                
                events.append({
                    'time': time,
                    'event': event,
                    'forecast': forecast,
                    'previous': previous,
                    'impact': impact
                })
        
        print(f"–ü–æ–ª—É—á–µ–Ω–æ US —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        return events
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞: {e}")
        return []

def convert_to_msk_time(time_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ EST –≤ MSK (+8 —á–∞—Å–æ–≤)"""
    if time_str in ['TBD', 'All Day', 'Tentative', '']:
        return 'TBD'
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–∞–∫ HH:MM AM/PM
        dt = datetime.strptime(time_str, '%I:%M %p')
        est_tz = pytz.timezone('US/Eastern')
        msk_tz = pytz.timezone('Europe/Moscow')
        
        est_dt = est_tz.localize(dt.replace(year=date.today().year, month=date.today().month, day=date.today().day))
        msk_dt = est_dt.astimezone(msk_tz)
        return msk_dt.strftime('%H:%M')
    except:
        try:
            dt = datetime.strptime(time_str, '%H:%M')
            # –ï—Å–ª–∏ 24h —Ñ–æ—Ä–º–∞—Ç, +8 —á–∞—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ
            hour = dt.hour + 8
            if hour >= 24: hour -= 24
            return f"{hour:02d}:{dt.minute:02d}"
        except:
            return time_str

def format_events(events):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–µ–∫—Å—Ç –¥–ª—è Telegram"""
    if not events:
        return "üìÖ <b>–°–µ–≥–æ–¥–Ω—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –°–®–ê –Ω–µ—Ç.</b>\n\nüí° <i>–û–±—ã—á–Ω–æ –≤–∞–∂–Ω—ã–µ: NFP, CPI, FOMC, –í–í–ü.</i>"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    msk_tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(msk_tz).time()
    
    filtered_events = []
    for ev in events:
        time_str = convert_to_msk_time(ev.get('time', '00:00'))
        try:
            event_time = datetime.strptime(time_str, '%H:%M').time()
            if event_time >= now:
                ev['time'] = time_str  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ MSK
                filtered_events.append(ev)
        except:
            ev['time'] = time_str
            filtered_events.append(ev)
    
    filtered_events.sort(key=lambda ev: datetime.strptime(ev.get('time', '00:00'), '%H:%M'))
    
    if not filtered_events:
        return "üìÖ <b>–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –°–®–ê.</b>"
    
    today = date.today()
    month_ru = {
        'January': '—è–Ω–≤–∞—Ä—å', 'February': '—Ñ–µ–≤—Ä–∞–ª—å', 'March': '–º–∞—Ä—Ç', 'April': '–∞–ø—Ä–µ–ª—å', 'May': '–º–∞–π', 'June': '–∏—é–Ω—å',
        'July': '–∏—é–ª—å', 'August': '–∞–≤–≥—É—Å—Ç', 'September': '—Å–µ–Ω—Ç—è–±—Ä—å', 'October': '–æ–∫—Ç—è–±—Ä—å', 'November': '–Ω–æ—è–±—Ä—å', 'December': '–¥–µ–∫–∞–±—Ä—å'
    }
    month_en = today.strftime('%B')
    month_name = month_ru.get(month_en, month_en)
    
    message = f"""üìÖ <b>–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø –°–®–ê üá∫üá∏</b>
üìÜ <b>–î–∞—Ç–∞: {today.strftime('%d.%m')}, {month_name}</b>
‚è∞ <b>–í—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</b>

"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    events_by_time = {}
    for ev in filtered_events:
        time_key = ev.get('time', 'TBD')
        if time_key not in events_by_time:
            events_by_time[time_key] = []
        events_by_time[time_key].append(ev)
    
    sorted_times = sorted(events_by_time.keys(), key=lambda t: datetime.strptime(t, '%H:%M') if t != 'TBD' else datetime.max)
    
    for i, time_str in enumerate(sorted_times):
        time_events = events_by_time[time_str]
        if i > 0:
            message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        for ev in time_events:
            impact_map = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}
            impact = impact_map.get(ev.get('impact', 'medium'), 'üü°')
            
            message += f"{impact} <b>{time_str}</b>\n"
            message += f"   {ev.get('event', 'Unknown event')}\n"
            
            forecast = ev.get('forecast', '')
            if forecast:
                message += f"   –ü—Ä–æ–≥–Ω–æ–∑: {forecast}\n"
            previous = ev.get('previous', '')
            if previous:
                message += f"   –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {previous}\n"
    
    message += "\nüí° <i>–í—Ä–µ–º—è –∏–∑ EST –≤ MSK (+8 —á). –î–∞–Ω–Ω—ã–µ: TradingEconomics</i>"
    return message

async def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode='HTML')
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

async def main():
    print("=== US ECONOMIC EVENTS BOT ===")
    print(f"–î–∞—Ç–∞: {date.today().strftime('%d.%m.%Y')}")
    
    try:
        events = await asyncio.to_thread(fetch_us_events)
        message = format_events(events)
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...")
        await send_telegram_message(message)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
