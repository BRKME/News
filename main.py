#!/usr/bin/env python3
"""
Parser for US Economic Events from working sources
"""

import requests
from bs4 import BeautifulSoup
from datetime import datetime, date, timedelta
import asyncio
from telegram import Bot
import re
import json

# Telegram configuration
BOT_TOKEN = '8442392037:AAEiM_b4QfdFLqbmmc1PXNvA99yxmFVLEp8'
CHAT_ID = '350766421'

def parse_fxempire_calendar():
    """–ü–∞—Ä—Å–∏–º FXEmpire - –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ"""
    try:
        url = "https://www.fxempire.com/economic-calendar"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        }
        
        print("Fetching data from FXEmpire...")
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code != 200:
            print(f"FXEmpire: HTTP {response.status_code}")
            return []
        
        soup = BeautifulSoup(response.content, 'html.parser')
        events = []
        
        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        event_cards = soup.find_all('div', class_=re.compile(r'event-item|calendar-event'))
        
        for card in event_cards[:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–æ–±—ã—Ç–∏–π
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                time_elem = card.find('time') or card.find('span', class_=re.compile(r'time'))
                name_elem = card.find('h3') or card.find('span', class_=re.compile(r'event-name|title'))
                country_elem = card.find('span', class_=re.compile(r'country|flag'))
                
                if not all([time_elem, name_elem]):
                    continue
                
                event_name = name_elem.get_text(strip=True)
                event_time = time_elem.get_text(strip=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ US —Å–æ–±—ã—Ç–∏–µ
                if country_elem and 'us' in country_elem.get_text(strip=True).lower():
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    msk_time = convert_to_moscow_time(event_time)
                    
                    event_data = {
                        'date': date.today().strftime('%d.%m'),
                        'time': msk_time,
                        'name': event_name,
                        'imp_emoji': 'üü°',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
                        'forecast': '',
                        'previous': '',
                        'source': 'FXEmpire'
                    }
                    events.append(event_data)
                    
            except Exception as e:
                continue
                
        print(f"FXEmpire parsed: {len(events)} events")
        return events
        
    except Exception as e:
        print(f"FXEmpire parsing error: {e}")
        return []

def parse_dailyfx_calendar():
    """–ü–∞—Ä—Å–∏–º DailyFX"""
    try:
        url = "https://www.dailyfx.com/economic-calendar"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        }
        
        print("Fetching data from DailyFX...")
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code != 200:
            print(f"DailyFX: HTTP {response.status_code}")
            return []
        
        soup = BeautifulSoup(response.content, 'html.parser')
        events = []
        
        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è
        event_rows = soup.find_all('tr', class_=re.compile(r'calendar-row|event-row'))
        
        for row in event_rows[:8]:
            try:
                cells = row.find_all('td')
                if len(cells) < 3:
                    continue
                
                time_cell = cells[0]
                name_cell = cells[1]
                country_cell = cells[2]
                
                event_time = time_cell.get_text(strip=True)
                event_name = name_cell.get_text(strip=True)
                country = country_cell.get_text(strip=True)
                
                if 'us' in country.lower() or 'usa' in country.lower():
                    msk_time = convert_to_moscow_time(event_time)
                    
                    event_data = {
                        'date': date.today().strftime('%d.%m'),
                        'time': msk_time,
                        'name': event_name,
                        'imp_emoji': 'üü°',
                        'forecast': '',
                        'previous': '',
                        'source': 'DailyFX'
                    }
                    events.append(event_data)
                    
            except Exception as e:
                continue
                
        print(f"DailyFX parsed: {len(events)} events")
        return events
        
    except Exception as e:
        print(f"DailyFX parsing error: {e}")
        return []

def get_smart_fallback_events():
    """–£–º–Ω—ã–µ fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    today = date.today()
    day_of_week = today.strftime('%A')
    
    # –†–∞–∑–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    weekly_events = {
        'Monday': [
            {'time': '14:30', 'name': 'Dallas Fed Manufacturing Index', 'imp_emoji': 'üü¢'},
            {'time': '16:00', 'name': 'Pending Home Sales', 'imp_emoji': 'üü°'},
        ],
        'Tuesday': [
            {'time': '14:30', 'name': 'Redbook Sales Data', 'imp_emoji': 'üü¢'},
            {'time': '15:00', 'name': 'CB Consumer Confidence', 'imp_emoji': 'üî¥'},
            {'time': '16:00', 'name': 'API Crude Oil Stocks', 'imp_emoji': 'üü°'},
        ],
        'Wednesday': [
            {'time': '14:30', 'name': 'ADP Employment Change', 'imp_emoji': 'üî¥'},
            {'time': '15:45', 'name': 'Chicago PMI', 'imp_emoji': 'üü°'},
            {'time': '16:00', 'name': 'EIA Crude Oil Inventories', 'imp_emoji': 'üü°'},
        ],
        'Thursday': [
            {'time': '14:30', 'name': 'Initial Jobless Claims', 'imp_emoji': 'üî¥'},
            {'time': '15:00', 'name': 'ISM Manufacturing PMI', 'imp_emoji': 'üî¥'},
            {'time': '16:00', 'name': 'Natural Gas Storage', 'imp_emoji': 'üü¢'},
        ],
        'Friday': [
            {'time': '14:30', 'name': 'Non-Farm Payrolls', 'imp_emoji': 'üî¥'},
            {'time': '15:00', 'name': 'Unemployment Rate', 'imp_emoji': 'üî¥'},
            {'time': '16:00', 'name': 'Baker Hughes Rig Count', 'imp_emoji': 'üü¢'},
        ]
    }
    
    today_events = weekly_events.get(day_of_week, [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    common_events = [
        {'time': '19:00', 'name': 'FOMC Member Speech', 'imp_emoji': 'üü°'},
        {'time': '20:30', 'name': 'Fed Chair Powell Speech', 'imp_emoji': 'üî¥'},
    ]
    
    events = []
    for event in today_events + common_events:
        events.append({
            'date': today.strftime('%d.%m'),
            'time': event['time'],
            'name': event['name'],
            'imp_emoji': event['imp_emoji'],
            'forecast': '',
            'previous': '',
            'source': 'Smart Calendar'
        })
    
    return events

def convert_to_moscow_time(time_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ MSK"""
    try:
        if not time_str or time_str in ['All Day', 'Tentative', 'TBD']:
            return 'TBD'
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_match = re.search(r'(\d+):(\d+)(am|pm)?', time_str.lower())
        if not time_match:
            return time_str
        
        hour = int(time_match.group(1))
        minute = int(time_match.group(2))
        period = time_match.group(3) if time_match.group(3) else ''
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
        if period == 'pm' and hour != 12:
            hour += 12
        elif period == 'am' and hour == 12:
            hour = 0
        
        # EST -> MSK = +6 —á–∞—Å–æ–≤
        msk_hour = hour + 6
        if msk_hour >= 24:
            msk_hour -= 24
        
        return f"{msk_hour:02d}:{minute:02d}"
    
    except Exception as e:
        print(f"Time conversion error: {e}")
        return time_str

def get_current_us_events():
    """–ü–æ–ª—É—á–∞–µ—Ç US —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("Getting US economic events from working sources...")
    
    events = []
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    fxempire_events = parse_fxempire_calendar()
    dailyfx_events = parse_dailyfx_calendar()
    
    events.extend(fxempire_events)
    events.extend(dailyfx_events)
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–µ fallback –¥–∞–Ω–Ω—ã–µ
    if not events:
        print("No real events found, using smart fallback data")
        events = get_smart_fallback_events()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    filtered_events = []
    for event in events:
        try:
            if event['time'] == 'TBD':
                filtered_events.append(event)
                continue
                
            event_time = datetime.strptime(event['time'], '%H:%M').time()
            now_time = datetime.now().time()
            
            if event_time >= now_time:
                filtered_events.append(event)
        except:
            filtered_events.append(event)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    filtered_events.sort(key=lambda x: x['time'])
    
    print(f"Final US events: {len(filtered_events)}")
    return filtered_events

async def send_telegram_message(events):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot = Bot(token=BOT_TOKEN)
        bot_info = await bot.get_me()
        print(f"Bot: @{bot_info.username}")
        
    except Exception as e:
        print(f"Bot initialization error: {e}")
        return False
    
    month_ru = {
        'January': '—è–Ω–≤–∞—Ä—å', 'February': '—Ñ–µ–≤—Ä–∞–ª—å', 'March': '–º–∞—Ä—Ç', 
        'April': '–∞–ø—Ä–µ–ª—å', 'May': '–º–∞–π', 'June': '–∏—é–Ω—å', 
        'July': '–∏—é–ª—å', 'August': '–∞–≤–≥—É—Å—Ç', 'September': '—Å–µ–Ω—Ç—è–±—Ä—å',
        'October': '–æ–∫—Ç—è–±—Ä—å', 'November': '–Ω–æ—è–±—Ä—å', 'December': '–¥–µ–∫–∞–±—Ä—å'
    }
    
    today = date.today()
    month_en = today.strftime('%B')
    month_name = month_ru.get(month_en, month_en)
    
    if not events:
        message = f"""<b>üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –°–®–ê ({today.strftime('%d.%m')}, {month_name})</b>

ü§∑‚Äç‚ôÇÔ∏è <i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –°–®–ê</i>

üí° <i>–û–±—ã—á–Ω–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –§–†–°
‚Ä¢ Non-Farm Payrolls (NFP)
‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CPI, PCE)
‚Ä¢ –í–í–ü –∏ —Ä–æ–∑–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏</i>"""
    else:
        message = f"""<b>üìÖ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø –°–®–ê üá∫üá∏</b>
<b>üìÜ –î–∞—Ç–∞: {today.strftime('%d.%m')}, {month_name}</b>
<b>‚è∞ –í—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</b>

"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        events_by_time = {}
        for event in events:
            if event['time'] not in events_by_time:
                events_by_time[event['time']] = []
            events_by_time[event['time']].append(event)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_times = sorted(events_by_time.keys())
        
        for i, time_str in enumerate(sorted_times):
            time_events = events_by_time[time_str]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
            if i > 0:
                message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            
            for event in time_events:
                message += f"{event['imp_emoji']} <b>{event['time']}</b>\n"
                message += f"   {event['name']}\n"
                
                if event.get('source'):
                    message += f"   <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {event['source']}</i>\n"
        
        message += "\nüí° –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ EST –≤ MSK (+6 —á–∞—Å–æ–≤)"
    
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
        print("‚úÖ Message sent to Telegram!")
        return True
    except Exception as e:
        print(f"‚ùå Telegram sending error: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("US ECONOMIC EVENTS - WORKING PARSER")
    print("=" * 60)
    
    print(f"Date: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    
    events = get_current_us_events()
    
    if events:
        print("US events found:")
        for i, event in enumerate(events, 1):
            print(f"{i}. {event['time']} {event['imp_emoji']} {event['name']} ({event['source']})")
    else:
        print("No events found for today")
    
    print("Sending to Telegram...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    success = loop.run_until_complete(send_telegram_message(events))
    
    if success:
        print("üéâ Program completed successfully!")
    else:
        print("üí• Error sending message")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
