import sys
import asyncio
import pkg_resources
import datetime
import pytz
import requests
from loguru import logger
from market_calendar_tool import MarketCalendar
from telegram import Bot
from telegram.error import TelegramError


# === üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
required_packages = {
    "requests": ">=2.32.3",
    "beautifulsoup4": ">=4.12.3",
    "python-telegram-bot": "==20.7",
    "pytz": "==2023.3",
    "market-calendar-tool": ">=0.2.2",
    "loguru": ">=0.7.2"
}

def check_dependencies():
    for package, version_spec in required_packages.items():
        try:
            pkg_resources.require(f"{package}{version_spec}")
        except pkg_resources.DistributionNotFound:
            print(f"‚ùå –ü–∞–∫–µ—Ç {package} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏: pip install {package}{version_spec}")
            sys.exit(1)
        except pkg_resources.VersionConflict as e:
            print(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ {package} –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ ({e}).")
            print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è: {version_spec}")
            print(f"   –ò—Å–ø—Ä–∞–≤—å —á–µ—Ä–µ–∑: pip install '{package}{version_spec}'")
            sys.exit(1)

check_dependencies()


# === ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TELEGRAM_TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"
TELEGRAM_CHAT_ID = "ID_–ß–ê–¢–ê"
TIMEZONE = pytz.timezone("Europe/London")
EXCHANGES = ["NYSE", "NASDAQ", "LSE", "JPX"]


# === üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Ç–æ—Ä–≥–æ–≤ ===
async def get_market_schedule():
    try:
        mc = MarketCalendar()
        results = {}

        for exchange in EXCHANGES:
            logger.info(f"üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {exchange}")
            calendar = await mc.get(exchange, start_date="today", end_date="+5d")
            next_open = None

            for row in calendar.itertuples():
                if getattr(row, "is_open", False):
                    next_open = getattr(row, "date")
                    break

            results[exchange] = next_open

        return results

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None


# === ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram ===
async def send_telegram_message(message: str):
    bot = Bot(token=TELEGRAM_TOKEN)
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode="HTML")
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# === üöÄ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def main():
    logger.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π ===")

    schedule = await get_market_schedule()
    if not schedule:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–æ—Ä–≥–æ–≤.")
        return

    today = datetime.datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    message_lines = [f"üìä <b>–¢–æ—Ä–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {today}</b>\n"]

    for exchange, next_open in schedule.items():
        if next_open:
            message_lines.append(f"üè¶ {exchange}: —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å ‚Äî <b>{next_open}</b>")
        else:
            message_lines.append(f"üè¶ {exchange}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚ùå")

    message = "\n".join(message_lines)
    await send_telegram_message(message)


if __name__ == "__main__":
    asyncio.run(main())
