#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä US —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è Telegram
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç market-calendar-tool
"""

from market_calendar_tool import MarketCalendar
import asyncio
from telegram import Bot
from datetime import date, datetime, time as dt_time

# Telegram configuration
BOT_TOKEN = '8442392037:AAEiM_b4QfdFLqbmmc1PXNvA99yxmFVLEp8'
CHAT_ID = '350766421'

def convert_to_moscow_time(time_str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ MSK (–ø–ª—é—Å 6 —á–∞—Å–æ–≤ –∫ EST)
    """
    try:
        if not time_str or time_str in ['All Day', 'Tentative', 'TBD']:
            return 'TBD'
        
        # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 'HH:MM' –∏–ª–∏ 'HH:MMam/pm'
        import re
        time_match = re.search(r'(\d+):(\d+)(am|pm)?', time_str.lower())
        if not time_match:
            return time_str
        
        hour = int(time_match.group(1))
        minute = int(time_match.group(2))
        period = time_match.group(3) if time_match.group(3) else ''
        
        if period == 'pm' and hour != 12:
            hour += 12
        elif period == 'am' and hour == 12:
            hour = 0
        
        msk_hour = hour + 6
        if msk_hour >= 24:
            msk_hour -= 24
        
        return f"{msk_hour:02d}:{minute:02d}"
    
    except Exception as e:
        print(f"Time conversion error: {e}")
        return time_str

def get_us_events():
    """
    –ü–æ–ª—É—á–∞–µ–º US —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    """
    today = date.today()
    mc = MarketCalendar(sites=['ForexFactory'])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    df = mc.scrape(start=today, end=today)
    
    if df.empty:
        return df
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ US —Å–æ–±—ã—Ç–∏—è
    df_us = df[df['country'].str.lower() == 'us'].copy()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ MSK
    df_us['msk_time'] = df_us['time'].apply(convert_to_moscow_time)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    df_us.sort_values('msk_time', inplace=True)
    
    return df_us

def format_events(events_df):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DataFrame —Å–æ–±—ã—Ç–∏–π –¥–ª—è Telegram
    """
    if events_df.empty:
        return "ü§∑‚Äç‚ôÇÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –°–®–ê."
    
    today = date.today()
    message = f"<b>üìÖ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø –°–®–ê üá∫üá∏</b>\n<b>üìÜ –î–∞—Ç–∞: {today.strftime('%d.%m.%Y')}</b>\n<b>‚è∞ –í—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</b>\n\n"
    
    for _, row in events_df.iterrows():
        importance = row.get('importance', 'üü°')
        event_name = row['event']
        time_msk = row['msk_time']
        site = row.get('site', 'Unknown')
        
        message += f"{importance} <b>{time_msk}</b> {event_name}\n"
        message += f"<i>–ò—Å—Ç–æ—á–Ω–∏–∫: {site}</i>\n"
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    return message

async def send_telegram(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    """
    try:
        bot = Bot(token=BOT_TOKEN)
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
        print("‚úÖ Message sent to Telegram!")
    except Exception as e:
        print(f"‚ùå Telegram sending error: {e}")

def main():
    events_df = get_us_events()
    message = format_events(events_df)
    asyncio.run(send_telegram(message))

if __name__ == "__main__":
    main()
