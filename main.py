#!/usr/bin/env python3
"""
US Economic Events Telegram Notifier
–í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è: —Ä–µ–∞–ª—å–Ω—ã–µ –∏–ª–∏ fallback
"""

import requests
from bs4 import BeautifulSoup
from datetime import datetime, date
import asyncio
from telegram import Bot
import re

# Telegram configuration
BOT_TOKEN = 'YOUR_BOT_TOKEN'
CHAT_ID = 'YOUR_CHAT_ID'

def convert_to_moscow_time(time_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è EST -> MSK (+6 —á–∞—Å–æ–≤)"""
    try:
        if not time_str or time_str in ['All Day', 'Tentative', 'TBD']:
            return 'TBD'

        time_match = re.search(r'(\d+):(\d+)(am|pm)?', time_str.lower())
        if not time_match:
            return time_str

        hour = int(time_match.group(1))
        minute = int(time_match.group(2))
        period = time_match.group(3) or ''

        if period == 'pm' and hour != 12:
            hour += 12
        elif period == 'am' and hour == 12:
            hour = 0

        msk_hour = (hour + 6) % 24
        return f"{msk_hour:02d}:{minute:02d}"
    except:
        return time_str

def get_fallback_events():
    """Fallback —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"""
    today = date.today()
    weekly_events = {
        'Monday': [
            {'time': '14:30', 'name': 'Dallas Fed Manufacturing Index', 'imp_emoji': 'üü¢'},
            {'time': '16:00', 'name': 'Pending Home Sales', 'imp_emoji': 'üü°'},
        ],
        'Tuesday': [
            {'time': '14:30', 'name': 'Redbook Sales Data', 'imp_emoji': 'üü¢'},
            {'time': '15:00', 'name': 'CB Consumer Confidence', 'imp_emoji': 'üî¥'},
            {'time': '16:00', 'name': 'API Crude Oil Stocks', 'imp_emoji': 'üü°'},
        ],
        'Wednesday': [
            {'time': '14:30', 'name': 'ADP Employment Change', 'imp_emoji': 'üî¥'},
            {'time': '15:45', 'name': 'Chicago PMI', 'imp_emoji': 'üü°'},
            {'time': '16:00', 'name': 'EIA Crude Oil Inventories', 'imp_emoji': 'üü°'},
        ],
        'Thursday': [
            {'time': '14:30', 'name': 'Initial Jobless Claims', 'imp_emoji': 'üî¥'},
            {'time': '15:00', 'name': 'ISM Manufacturing PMI', 'imp_emoji': 'üî¥'},
            {'time': '16:00', 'name': 'Natural Gas Storage', 'imp_emoji': 'üü¢'},
        ],
        'Friday': [
            {'time': '14:30', 'name': 'Non-Farm Payrolls', 'imp_emoji': 'üî¥'},
            {'time': '15:00', 'name': 'Unemployment Rate', 'imp_emoji': 'üî¥'},
            {'time': '16:00', 'name': 'Baker Hughes Rig Count', 'imp_emoji': 'üü¢'},
        ]
    }

    events = []
    day_events = weekly_events.get(date.today().strftime('%A'), [])
    common_events = [
        {'time': '19:00', 'name': 'FOMC Member Speech', 'imp_emoji': 'üü°'},
        {'time': '20:30', 'name': 'Fed Chair Powell Speech', 'imp_emoji': 'üî¥'},
    ]
    for e in day_events + common_events:
        events.append({
            'date': date.today().strftime('%d.%m'),
            'time': e['time'],
            'name': e['name'],
            'imp_emoji': e['imp_emoji'],
            'source': 'Fallback'
        })
    return events

def get_us_events():
    """–ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥, –∏–Ω–∞—á–µ fallback"""
    # –ü–æ–∫–∞ –ø–∞—Ä—Å–µ—Ä –æ—Ç–∫–ª—é—á–∞–µ–º, –≤—Å–µ–≥–¥–∞ fallback
    events = get_fallback_events()
    return events

async def send_telegram(events):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    bot = Bot(token=BOT_TOKEN)

    today = date.today()
    month_ru = {
        'January':'—è–Ω–≤–∞—Ä—å','February':'—Ñ–µ–≤—Ä–∞–ª—å','March':'–º–∞—Ä—Ç','April':'–∞–ø—Ä–µ–ª—å',
        'May':'–º–∞–π','June':'–∏—é–Ω—å','July':'–∏—é–ª—å','August':'–∞–≤–≥—É—Å—Ç',
        'September':'—Å–µ–Ω—Ç—è–±—Ä—å','October':'–æ–∫—Ç—è–±—Ä—å','November':'–Ω–æ—è–±—Ä—å','December':'–¥–µ–∫–∞–±—Ä—å'
    }
    month_name = month_ru.get(today.strftime('%B'), today.strftime('%B'))

    message = f"<b>üìÖ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø –°–®–ê üá∫üá∏</b>\n<b>üìÜ –î–∞—Ç–∞: {today.strftime('%d.%m')}, {month_name}</b>\n<b>‚è∞ –í—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</b>\n\n"

    for event in events:
        message += f"{event['imp_emoji']} <b>{event['time']}</b>\n   {event['name']}\n   <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {event['source']}</i>\n\n"

    message += "üí° –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ EST –≤ MSK (+6 —á–∞—Å–æ–≤)"

    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
        print("‚úÖ Message sent to Telegram!")
        return True
    except Exception as e:
        print(f"‚ùå Telegram sending error: {e}")
        return False

def main():
    events = get_us_events()
    print(f"Found {len(events)} events for today.")
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(send_telegram(events))

if __name__ == "__main__":
    main()
