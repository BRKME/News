#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –°–®–ê —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 MSK
"""

import requests
from bs4 import BeautifulSoup
from datetime import datetime, date, timedelta
import asyncio
import os
from telegram import Bot
import re
import pytz
import json

# –û—Ç–∫—Ä—ã—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
BOT_TOKEN = '8442392037:AAEiM_b4QfdFLqbmmc1PXNvA99yxmFVLEp8'
CHAT_ID = '350766421'

def convert_to_moscow_time(time_str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è EST –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (MSK)
    –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: EST ‚Üí MSK = +6 —á–∞—Å–æ–≤
    """
    try:
        if time_str == 'All Day' or time_str == '' or time_str == 'Tentative':
            return '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: "3:00pm" –∏–ª–∏ "15:00")
        time_match = re.search(r'(\d+):(\d+)(am|pm)?', time_str.lower())
        if not time_match:
            return time_str
        
        hour = int(time_match.group(1))
        minute = int(time_match.group(2))
        period = time_match.group(3) if time_match.group(3) else ''
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if period == 'pm' and hour != 12:
            hour += 12
        elif period == 'am' and hour == 12:
            hour = 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: EST ‚Üí MSK = +6 —á–∞—Å–æ–≤
        msk_hour = hour + 6
        if msk_hour >= 24:
            msk_hour -= 24
        
        return f"{msk_hour:02d}:{minute:02d}"
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ '{time_str}': {e}")
        return time_str

def parse_investing_com():
    """
    –ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å Investing.com
    """
    print("üåê –ü–∞—Ä—Å–∏–º Investing.com...")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    }
    
    try:
        # Investing.com —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        url = 'https://www.investing.com/economic-calendar/'
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        events = []
        
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Å–æ–±—ã—Ç–∏—è–º–∏
        table = soup.find('table', id='economicCalendarData')
        if not table:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Investing.com")
            return events
        
        rows = table.find_all('tr')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        
        for row in rows:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ–±—ã—Ç–∏–µ–º (–∞ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è)
                if 'js-event-item' not in row.get('class', []):
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                time_cell = row.find('td', class_='time')
                if not time_cell:
                    continue
                
                time_text = time_cell.get_text(strip=True)
                event_time = convert_to_moscow_time(time_text)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—É
                currency_cell = row.find('td', class_='left')
                if currency_cell:
                    currency_flag = currency_cell.find('span', class_='ceFlags')
                    if currency_flag:
                        currency = currency_flag.get('title', '')
                        if 'United States' not in currency and 'USD' not in currency:
                            continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                event_cell = row.find('td', class_='event')
                if event_cell:
                    event_name = event_cell.get_text(strip=True)
                    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    event_name = re.sub(r'\s+', ' ', event_name)
                else:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
                impact_cell = row.find('td', class_='sentiment')
                imp_emoji = 'üü¢'
                if impact_cell:
                    bulls = impact_cell.find_all('i', class_='grayFullBullishIcon')
                    if len(bulls) >= 3:
                        imp_emoji = 'üî¥'
                    elif len(bulls) >= 2:
                        imp_emoji = 'üü°'
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                forecast_cell = row.find('td', class_='forecast')
                previous_cell = row.find('td', class_='previous')
                
                forecast = forecast_cell.get_text(strip=True) if forecast_cell else ''
                previous = previous_cell.get_text(strip=True) if previous_cell else ''
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                today = date.today()
                display_date = today.strftime('%d.%m')
                
                event_data = {
                    'date': display_date,
                    'time': event_time,
                    'name': event_name,
                    'imp_emoji': imp_emoji,
                    'forecast': forecast,
                    'previous': previous
                }
                
                events.append(event_data)
                print(f"‚úÖ Investing.com: {event_time} - {event_name} {imp_emoji}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ Investing.com: {e}")
                continue
        
        print(f"üìä Investing.com: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        return events
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Investing.com: {e}")
        return []

def parse_fxstreet():
    """
    –ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å FXStreet
    """
    print("üåê –ü–∞—Ä—Å–∏–º FXStreet...")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json, text/plain, */*',
    }
    
    try:
        # FXStreet API –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        today = datetime.now().strftime('%Y-%m-%d')
        url = f'https://cdn.fxstreet.com/economic-calendar/events.json?from={today}&to={today}'
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        data = response.json()
        events = []
        
        for event in data:
            try:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USD —Å–æ–±—ã—Ç–∏—è
                if event.get('currency') != 'USD':
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                time_str = event.get('time', '')
                event_time = convert_to_moscow_time(time_str)
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                event_name = event.get('title', '')
                if not event_name:
                    continue
                
                # –í–∞–∂–Ω–æ—Å—Ç—å
                importance = event.get('importance', 0)
                if importance >= 3:
                    imp_emoji = 'üî¥'
                elif importance >= 2:
                    imp_emoji = 'üü°'
                else:
                    imp_emoji = 'üü¢'
                
                # –ü—Ä–æ–≥–Ω–æ–∑ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                forecast = event.get('consensus', '')
                previous = event.get('previous', '')
                
                # –î–∞—Ç–∞
                event_date = date.today().strftime('%d.%m')
                
                event_data = {
                    'date': event_date,
                    'time': event_time,
                    'name': event_name,
                    'imp_emoji': imp_emoji,
                    'forecast': str(forecast) if forecast else '',
                    'previous': str(previous) if previous else ''
                }
                
                events.append(event_data)
                print(f"‚úÖ FXStreet: {event_time} - {event_name} {imp_emoji}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏—è FXStreet: {e}")
                continue
        
        print(f"üìä FXStreet: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        return events
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FXStreet: {e}")
        return []

def parse_mql5():
    """
    –ü–∞—Ä—Å–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å MQL5
    """
    print("üåê –ü–∞—Ä—Å–∏–º MQL5...")
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    }
    
    try:
        url = 'https://www.mql5.com/ru/economic-calendar/united-states'
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        events = []
        
        # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        event_rows = soup.find_all('tr', class_='ec-table-row')
        
        for row in event_rows:
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if 'ec-table-header' in row.get('class', []):
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                time_cell = row.find('td', class_='ec-table-time')
                if not time_cell:
                    continue
                
                time_text = time_cell.get_text(strip=True)
                event_time = convert_to_moscow_time(time_text)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
                event_cell = row.find('td', class_='ec-table-event')
                if event_cell:
                    event_name = event_cell.get_text(strip=True)
                    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    event_name = re.sub(r'\s+', ' ', event_name).strip()
                else:
                    continue
                
                # –í–∞–∂–Ω–æ—Å—Ç—å
                impact_cell = row.find('td', class_='ec-table-importance')
                imp_emoji = 'üü¢'
                if impact_cell:
                    importance = impact_cell.get_text(strip=True)
                    if 'high' in importance.lower():
                        imp_emoji = 'üî¥'
                    elif 'medium' in importance.lower():
                        imp_emoji = 'üü°'
                
                # –ü—Ä–æ–≥–Ω–æ–∑ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                forecast_cell = row.find('td', class_='ec-table-forecast')
                previous_cell = row.find('td', class_='ec-table-previous')
                
                forecast = forecast_cell.get_text(strip=True) if forecast_cell else ''
                previous = previous_cell.get_text(strip=True) if previous_cell else ''
                
                # –î–∞—Ç–∞
                event_date = date.today().strftime('%d.%m')
                
                event_data = {
                    'date': event_date,
                    'time': event_time,
                    'name': event_name,
                    'imp_emoji': imp_emoji,
                    'forecast': forecast,
                    'previous': previous
                }
                
                events.append(event_data)
                print(f"‚úÖ MQL5: {event_time} - {event_name} {imp_emoji}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ MQL5: {e}")
                continue
        
        print(f"üìä MQL5: –Ω–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π")
        return events
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MQL5: {e}")
        return []

def get_economic_events():
    """
    –ü–æ–ª—É—á–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –°–®–ê –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    print("üîç –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è –°–®–ê –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    events = []
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    sources = [
        parse_investing_com,
        parse_fxstreet, 
        parse_mql5
    ]
    
    for source in sources:
        if len(events) == 0:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–±—ã—Ç–∏—è
            print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source.__name__}")
            source_events = source()
            events.extend(source_events)
    
    # –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not events:
        print("‚ö†Ô∏è –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        events = get_backup_events()
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤—Ä–µ–º–µ–Ω–∏)
    unique_events = []
    seen_events = set()
    
    for event in events:
        event_key = f"{event['name']}_{event['time']}"
        if event_key not in seen_events:
            seen_events.add(event_key)
            unique_events.append(event)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    filtered_events = []
    
    for event in unique_events:
        try:
            # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ (—Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä—Å–∏–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
            event_time = datetime.strptime(event['time'], '%H:%M').time()
            now_time = datetime.now().time()
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ —Å–µ–≥–æ–¥–Ω—è, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
            if event_time >= now_time or len(filtered_events) < 3:  # –ò–ª–∏ —Ö–æ—Ç—è –±—ã 3 —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞–∂–µ–º
                filtered_events.append(event)
        except:
            filtered_events.append(event)
    
    print(f"üéØ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π: {len(filtered_events)}")
    return filtered_events

def get_backup_events():
    """
    –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    """
    today = date.today()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    return [
        {
            'date': today.strftime('%d.%m'),
            'time': '15:30',
            'name': 'Core PCE Price Index m/m',
            'imp_emoji': 'üî¥',
            'forecast': '0.3%',
            'previous': '0.1%'
        },
        {
            'date': today.strftime('%d.%m'),
            'time': '17:00', 
            'name': 'Pending Home Sales m/m',
            'imp_emoji': 'üü¢',
            'forecast': '0.5%',
            'previous': '-0.5%'
        },
        {
            'date': today.strftime('%d.%m'),
            'time': '21:00',
            'name': 'CB Consumer Confidence',
            'imp_emoji': 'üü°',
            'forecast': '101.5',
            'previous': '100.5'
        }
    ]

async def send_telegram_message(events):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot = Bot(token=BOT_TOKEN)
        bot_info = await bot.get_me()
        print(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False
    
    month_ru = {
        'January': '—è–Ω–≤–∞—Ä—å', 'February': '—Ñ–µ–≤—Ä–∞–ª—å', 'March': '–º–∞—Ä—Ç', 
        'April': '–∞–ø—Ä–µ–ª—å', 'May': '–º–∞–π', 'June': '–∏—é–Ω—å', 
        'July': '–∏—é–ª—å', 'August': '–∞–≤–≥—É—Å—Ç', 'September': '—Å–µ–Ω—Ç—è–±—Ä—å',
        'October': '–æ–∫—Ç—è–±—Ä—å', 'November': '–Ω–æ—è–±—Ä—å', 'December': '–¥–µ–∫–∞–±—Ä—å'
    }
    
    today = date.today()
    month_en = today.strftime('%B')
    month_name = month_ru.get(month_en, month_en)
    
    if not events:
        message = f"""<b>üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –°–®–ê ({today.strftime('%d.%m')}, {month_name})</b>

ü§∑‚Äç‚ôÇÔ∏è <i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –°–®–ê</i>

üí° <i>–û–±—ã—á–Ω–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –§–†–°
‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (NFP)
‚Ä¢ –ò–Ω—Ñ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CPI)
‚Ä¢ –í–í–ü –∏ —Ä–æ–∑–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏</i>

üîç <i>–ò—Å—Ç–æ—á–Ω–∏–∫–∏: Investing.com, FXStreet, MQL5</i>"""
    else:
        message = f"""<b>üìÖ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø –°–®–ê üá∫üá∏</b>
<b>üìÜ –î–∞—Ç–∞: {today.strftime('%d.%m')}, {month_name}</b>
<b>‚è∞ –í—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</b>

<code>–î–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</code>

"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è)
        events_by_time = {}
        for event in events:
            if event['time'] not in events_by_time:
                events_by_time[event['time']] = []
            events_by_time[event['time']].append(event)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_times = sorted(events_by_time.keys())
        
        for i, time_str in enumerate(sorted_times):
            time_events = events_by_time[time_str]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
            if i > 0:
                message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            
            for event in time_events:
                message += f"{event['imp_emoji']} <b>{event['time']}</b>\n"
                message += f"   üìä {event['name']}\n"
                
                if event.get('forecast') and event['forecast']:
                    message += f"   üìà –ü—Ä–æ–≥–Ω–æ–∑: {event['forecast']}\n"
                if event.get('previous') and event['previous']:
                    message += f"   üìâ –ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {event['previous']}\n"
                
                message += "\n"
        
        message += "<i>üí° –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ EST –≤ MSK (+6 —á–∞—Å–æ–≤)</i>"
        message += "\n<i>üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Investing.com, FXStreet, MQL5</i>"
    
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("üöÄ –ü–ê–†–°–ï–† –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–• –°–û–ë–´–¢–ò–ô –°–®–ê - –ú–£–õ–¨–¢–ò–ò–°–¢–û–ß–ù–ò–ö")
    print("=" * 70)
    
    print(f"\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    
    events = get_economic_events()
    
    if events:
        print("\nüìã –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏–π:")
        for i, event in enumerate(events, 1):
            print(f"{i}. {event['time']} {event['imp_emoji']} {event['name']}")
    
    print(f"\nüì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    success = loop.run_until_complete(send_telegram_message(events))
    
    if success:
        print("üéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    print("\n" + "=" * 70)
    print("‚ú® –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ò–õ –†–ê–ë–û–¢–£")
    print("=" * 70)

if __name__ == "__main__":
    main()
